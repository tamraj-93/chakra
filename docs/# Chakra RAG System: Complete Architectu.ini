# Chakra RAG System: Complete Architecture Flow

Here's a comprehensive flow diagram of how the RAG (Retrieval-Augmented Generation) system integrates with your Chakra project:

```
┌───────────────────────────────────────────────────────────────────────────────┐
│                                                                               │
│                            FRONTEND (Angular)                                 │
│                                                                               │
│  ┌───────────────────┐      ┌───────────────────┐     ┌──────────────────┐   │
│  │  Knowledge Base   │      │  Template List    │     │   Consultation   │   │
│  │  Component        │◄────►│  Component        │────►│   Component      │   │
│  │  (Document Upload)│      │  (Template Select)│     │   (Conversation) │   │
│  └───────┬───────────┘      └───────────────────┘     └────────┬─────────┘   │
│          │                                                      │             │
│  ┌───────▼───────────┐                                  ┌───────▼─────────┐   │
│  │  Knowledge Base   │                                  │  Consultation   │   │
│  │  Service          │                                  │  Service        │   │
│  └───────┬───────────┘                                  └────────┬────────┘   │
│          │                                                       │            │
└──────────┼───────────────────────────────────────────────────────┼────────────┘
           │                                                       │
           │                      HTTP API                         │
           ▼                                                       ▼
┌──────────────────────────────────────────────────────────────────────────────┐
│                                                                              │
│                              BACKEND (FastAPI)                               │
│                                                                              │
│  ┌───────────────────┐      ┌───────────────────┐     ┌────────────────────┐ │
│  │  Documents API    │      │  Healthcare       │     │  Consultation API  │ │
│  │  Endpoint         │◄────►│  Template API     │     │  Endpoint          │ │
│  │  (/api/documents) │      │  (/api/healthcare)│     │  (/api/consultation)│ │
│  └───────┬───────────┘      └─────────┬─────────┘     └──────────┬─────────┘ │
│          │                            │                           │          │
│          │                            │                           │          │
│  ┌───────▼───────────┐     ┌──────────▼─────────┐      ┌──────────▼────────┐ │
│  │ Document Processor │     │ Healthcare Template│      │       AI          │ │
│  │ Service            │     │ Service           │      │     Service        │ │
│  └───────┬───────────┘      └─────────┬─────────┘      └──────────┬────────┘ │
│          │                            │                           │          │
│          │                            │          ┌────────────────┘          │
│          │                            │          │                           │
│  ┌───────▼───────────┐     ┌──────────▼──────────▼─────┐                     │
│  │ Vector Store      │     │         RAG               │                     │
│  │ Service (ChromaDB)│◄───►│        Service            │                     │
│  └───────┬───────────┘     └───────────────────────────┘                     │
│          │                                                                   │
└──────────┼──────────────────────────────────────────────────────────────────┘
           │
           ▼
┌────────────────────┐
│                    │
│   Document         │
│   Storage          │
│                    │
└────────────────────┘
```

## Key RAG Components and Locations

### Backend Files

1. **Vector Store Service** 
   - **Location**: vector_store.py
   - **Purpose**: Manages document embeddings in ChromaDB
   - **Connects to**: Document Processor, RAG Service

2. **Document Processor**
   - **Location**: document_processor.py
   - **Purpose**: Handles parsing, chunking, and processing documents
   - **Connects to**: Vector Store, Documents API

3. **RAG Service**
   - **Location**: rag_service.py
   - **Purpose**: Core of RAG functionality - retrieves relevant context and augments AI responses
   - **Connects to**: Vector Store, AI Service

4. **Documents API Endpoint**
   - **Location**: documents.py
   - **Purpose**: Handles document uploads, listing, filtering
   - **Connects to**: Document Processor, Frontend Knowledge Base

5. **Healthcare Template Service**
   - **Location**: healthcare_template_service.py
   - **Purpose**: Manages healthcare-specific templates
   - **Connects to**: Healthcare Templates API

6. **AI Service**
   - **Location**: ai.py
   - **Purpose**: Handles core LLM interactions, now enhanced with RAG
   - **Connects to**: RAG Service, Consultation API

7. **RAG Initialization Script**
   - **Location**: initialize_rag.py
   - **Purpose**: Initializes vector store with healthcare documents
   - **Connects to**: Vector Store, Document Processor

8. **Healthcare RAG Tests**
   - **Location**: test_healthcare_rag.py
   - **Purpose**: Tests RAG capabilities on healthcare queries
   - **Connects to**: RAG Service

### Frontend Files

9. **Knowledge Base Component**
   - **Location**: knowledge-base.component.ts
   - **Purpose**: UI for document upload and management
   - **Connects to**: Knowledge Base Service, Documents API

10. **Knowledge Base Service**
    - **Location**: knowledge-base.service.ts
    - **Purpose**: Handles API calls for document management
    - **Connects to**: Backend Documents API

11. **Healthcare Template Service**
    - **Location**: healthcare-template.service.ts
    - **Purpose**: Frontend service for healthcare template operations
    - **Connects to**: Backend Healthcare Templates API

## Data Flow During Consultation

1. **Document Upload & Indexing Flow**:
   ```
   User → Knowledge Base UI → Knowledge Base Service → Documents API → 
   Document Processor → Vector Store → ChromaDB Storage
   ```

2. **Healthcare Template Selection Flow**:
   ```
   User → Template List UI → Healthcare Template Service → 
   Healthcare Template API → Start Consultation
   ```

3. **RAG-Enhanced Consultation Flow**:
   ```
   User Query → Consultation UI → Consultation Service → Consultation API → 
   AI Service → RAG Service → Vector Store (retrieves relevant context) → 
   AI Service (generates response with context) → User sees enhanced response
   ```

This architecture allows your system to dynamically retrieve relevant information from your document repository during consultations, producing more accurate, domain-specific responses without requiring users to have specialized healthcare knowledge.